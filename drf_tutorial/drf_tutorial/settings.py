"""
Django settings for drf_tutorial project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xar57@r(n0x)q-e4t_6%ws$hu0)bjk1h-^95eln_vbc*zt29@d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # 開發RESTfull API 加上此行
    'rest_framework.authtoken', # DRF自帶的TOKEN認證(如果在DRF全局設定中，認證相關有用TOKEN就要加此行)
    'course',  # 自定義應用
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 可以添加下面這行，根據用戶的語言偏好來自動切換語言
    'django.middleware.locale.LocaleMiddleware'
]

ROOT_URLCONF = 'drf_tutorial.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_tutorial.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hant' # 修改，顯示繁體中文

TIME_ZONE = 'Asia/Taipei' # 修改，台北時間

USE_I18N = True

USE_L10N = True

USE_TZ = False # 不使用時區支持。


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# 配置靜態資相關
STATIC_URL = '/static/'  # 默認就有
STATIC_ROOT = BASE_DIR / 'static_root'  # 這是收集所有靜態文件的目錄
STATICFILES_DIRS = [  # 這是其他靜態文件目錄
    BASE_DIR / 'static',
]
"""
STATIC_ROOT用意:
用於設置 Django 收集所有靜態 文件的目錄
當你執行 python manage.py collectstatic 命令時，Django 會將所有應用中的靜態文件（包括第三方應用和你自己的應用）收集到這個目錄中。
這個目錄通常是在生產環境中使用，方便將靜態文件部署到 web 服務器上。

STATICFILES_DIRS用意:
用來指定其他靜態文件目錄的設定。它告訴 Django 到哪裡去找靜態文件
範例:

STATICFILES_DIRS = [
    BASE_DIR / "assets",  # 告訴 Django 在這個目錄裡找靜態文件
    BASE_DIR / "extra_static",  # 還可以告訴 Django 另一個目錄
]
"""


# Django REST Framework (DRF) 全局設定
REST_FRAMEWORK = {
    # ✅ 設定 API 頁面分頁（可選）
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # 使用分頁模式
    'PAGE_SIZE': 50,  # 每頁顯示 50 筆資料

    # ✅ 設定 API 返回的時間格式
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",  # 例如：2025-03-03 14:30:00

    # ✅ 設定 API 回應的 Renderer（渲染器），決定 API 如何回應數據
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',         # 讓 API 預設回傳 JSON 格式
        'rest_framework.renderers.BrowsableAPIRenderer'  # 讓 API 具有可視化的瀏覽器 API 介面（開發測試方便）
    ],

    # ✅ 設定 API 解析請求數據的方式 -->解析restqust.data的方式
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',  # 允許解析 JSON 請求
        'rest_framework.parsers.FormParser',  # 允許解析 `application/x-www-form-urlencoded` 表單請求
        'rest_framework.parsers.MultiPartParser',  # 允許解析 `multipart/form-data`（文件上傳）
    ],

    # ✅ 設定 API 權限管理（誰可以訪問 API）
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # 只有已驗證的使用者才能訪問
        # 若要允許所有使用者訪問，可改成：
        # 'rest_framework.permissions.AllowAny',
    ],

    # ✅ 設定 API 認證方式（身份驗證）
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',  # 使用者帳號+密碼（Basic Auth），可省略
        'rest_framework.authentication.SessionAuthentication',  # 會話認證（與 Django 內建登入機制相容）
        'rest_framework.authentication.TokenAuthentication',  # Token 認證（需在APP安裝 `rest_framework.authtoken`）
    ],
}
